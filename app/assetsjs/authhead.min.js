// Initialize Firebase
var config = {
  apiKey: "AIzaSyBHB7H6L2TgZeDJKS4ENC_fkdWtS_99T_E",
  authDomain: "trapteam-cc.firebaseapp.com",
  databaseURL: "https://trapteam-cc.firebaseio.com",
  projectId: "trapteam-cc",
  storageBucket: "trapteam-cc.appspot.com",
  messagingSenderId: "150993996289"
};
firebase.initializeApp(config);
function initapp() {
  firebase.auth().onAuthStateChanged(
    function(user) {
      if (user) {
        // User is signed in.
        displayName = user.displayName;
        email = user.email;
        emailVerified = user.emailVerified;
        photoURL = user.photoURL;
        uid = user.uid;
        phoneNumber = user.phoneNumber;
        providerData = user.providerData;
        if (firebase.auth().currentUser.emailVerified) { 
          console.log("account is fine");

        } else {
          alert("You Email is Not Verified. Click OK to send an email to you so you can get verified.");
          user.sendEmailVerification().then(function () {
            // Email sent.
          }).catch(function (error) {
            // An error occured.
          });
        }

        LogRocket.identify(uid, {
          name: displayName,
          email: email,

          // Add your own custom user variables here, ie:
          ph: phoneNumber,
          providerinfo: providerData
        });
        analytics.identify(user.uid, {
          name: displayName,
          email: user.email
        });
        analytics.identify(user.uid, {
          name: displayName,
          email: user.email
        });

        __insp.push(["identify", user.email]);
        user.getIdToken().then(function(accessToken) {
          document.getElementById("sign-in-status").textContent = "Signed in";
          document.getElementById("sign-in").textContent = "Sign out";
          document.getElementById(
            "account-details"
          ).textContent = JSON.stringify(
            {
              displayName: displayName,
              email: email,
              emailVerified: emailVerified,
              phoneNumber: phoneNumber,
              photoURL: photoURL,
              uid: uid,
              accessToken: accessToken,
              providerData: providerData
            },
            null,
            "  "
          );
          console.log(
            JSON.stringify(
              {
                displayName: displayName,
                email: email,
                emailVerified: emailVerified,
                phoneNumber: phoneNumber,
                photoURL: photoURL,
                uid: uid,
                accessToken: accessToken,
                providerData: providerData
              },
              null,
              "  "
            )
          );
        });
      } else {
        // User is signed out.
        document.getElementById("sign-in-status").textContent = "Signed out";
        document.getElementById("sign-in").textContent = "Sign in";
        document.getElementById("account-details").textContent = "null";
        document.getElementById("pagehide").innerhtml = "forget it now!";
        document.location.href = "/authneeded.html";
      }
    },
    function(error) {
      console.log(error);
    }
  );
}
window.onload = function() {
  initapp();
  console.log("app initialized");
  let database = firebase.auth().onAuthStateChanged(
    function(user) {
      if (user) {
        // User is signed in.
        displayName = user.displayName;
        email = user.email;
        emailVerified = user.emailVerified;
        photoURL = user.photoURL;
        6;
        uid = user.uid;
        phoneNumber = user.phoneNumber;
        providerData = user.providerData;
        if (firebase.auth().currentUser.emailVerified) {
          console.log("account is fine");

        } else {
          alert("You Email is Not Verified. Click OK to send an email to you so you can get verified.");

          user.sendEmailVerification().then(function () {
            // Email sent.
          }).catch(function (error) {
            // An error occured.
          });
        }

        LogRocket.identify(uid, {
          name: displayName,
          email: email,

          // Add your own custom user variables here, ie:
          ph: phoneNumber,
          providerinfo: providerData
        });
        analytics.identify(user.uid, {
          name: user.displayName,
          email: user.email
        });
        __insp.push(["identify", user.email]);

        user.getIdToken().then(function(accessToken) {
          document.getElementById("sign-in-status").textContent = "Signed in";
          document.getElementById("sign-in").textContent = "Sign out";
          document.getElementById(
            "account-details"
          ).textContent = JSON.stringify(
            {
              displayName: displayName,
              email: email,
              emailVerified: emailVerified,
              phoneNumber: phoneNumber,
              photoURL: photoURL,
              uid: uid,
              accessToken: accessToken,
              providerData: providerData
            },
            null,
            "  "
          );
          console.log("This is running");
          console.log(
            JSON.stringify(
              {
                displayName: displayName,
                email: email,
                emailVerified: emailVerified,
                phoneNumber: phoneNumber,
                photoURL: photoURL,
                uid: uid,
                accessToken: accessToken,
                providerData: providerData
              },
              null,
              "  "
            )
          );
        });
        console.log(user.displayName);
      } else {
        // User is signed out.
        document.getElementById("sign-in-status").textContent = "Signed out";
        document.getElementById("sign-in").textContent = "Sign in";
        document.getElementById("account-details").textContent = "null";
        document.getElementById("pagehide").innerhtml = "forget it now!";
        document.location.href = "/authneeded.html";
      }
    },
    function(error) {
      console.log(error);
    }
  );
  //code here database is
};

//HEADER CODE:

("use strict");

!(function() {
  var t = (window.driftt = window.drift = window.driftt || []);
  if (!t.init) {
    if (t.invoked)
      return void (
        window.console &&
        console.error &&
        console.error("Drift snippet included twice.")
      );
    (t.invoked = !0),
      (t.methods = [
        "identify",
        "config",
        "track",
        "reset",
        "debug",
        "show",
        "ping",
        "page",
        "hide",
        "off",
        "on"
      ]),
      (t.factory = function(e) {
        return function() {
          var n = Array.prototype.slice.call(arguments);
          return n.unshift(e), t.push(n), t;
        };
      }),
      t.methods.forEach(function(e) {
        t[e] = t.factory(e);
      }),
      (t.load = function(t) {
        var e = 3e5,
          n = Math.ceil(new Date() / e) * e,
          o = document.createElement("script");
        (o.type = "text/javascript"),
          (o.async = !0),
          (o.crossorigin = "anonymous"),
          (o.src = "https://js.driftt.com/include/" + n + "/" + t + ".js");
        var i = document.getElementsByTagName("script")[0];
        i.parentNode.insertBefore(o, i);
      });
  }
})();
drift.SNIPPET_VERSION = "0.3.1";
drift.load("cesz7uv9e69c");

window.dataLayer = window.dataLayer || [];
function gtag() {
  dataLayer.push(arguments);
}
gtag("js", new Date());

gtag("config", "UA-123568344-2");

!(function() {
  var analytics = (window.analytics = window.analytics || []);
  if (!analytics.initialize)
    if (analytics.invoked)
      window.console &&
        console.error &&
        console.error("Segment snippet included twice.");
    else {
      analytics.invoked = !0;
      analytics.methods = [
        "trackSubmit",
        "trackClick",
        "trackLink",
        "trackForm",
        "pageview",
        "identify",
        "reset",
        "group",
        "track",
        "ready",
        "alias",
        "debug",
        "page",
        "once",
        "off",
        "on"
      ];
      analytics.factory = function(t) {
        return function() {
          var e = Array.prototype.slice.call(arguments);
          e.unshift(t);
          analytics.push(e);
          return analytics;
        };
      };
      for (var t = 0; t < analytics.methods.length; t++) {
        var e = analytics.methods[t];
        analytics[e] = analytics.factory(e);
      }
      analytics.load = function(t, e) {
        var n = document.createElement("script");
        n.type = "text/javascript";
        n.async = !0;
        n.src =
          "https://cdn.segment.com/analytics.js/v1/" + t + "/analytics.min.js";
        var a = document.getElementsByTagName("script")[0];
        a.parentNode.insertBefore(n, a);
        analytics._loadOptions = e;
      };
      analytics.SNIPPET_VERSION = "4.1.0";
      analytics.load("gqbaHuIC0OV4lpzJiKF4pOdrJRIop365");
      analytics.page();
    }
})();

analytics.page(document.title);



function viewTrapDetails() {
  $(".twixpx-specifictrap").slideToggle();
  $(".twixpx-traps").slideToggle();
}